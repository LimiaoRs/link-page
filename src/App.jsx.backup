import { useState, useEffect } from "react";
import './App.css';
import Auth from './Auth';
import ProfileEditor from './ProfileEditor';
import LinkManager from './LinkManager';
import AvatarUploader from './AvatarUploader';
import { auth, database } from './supabase';
import ThemeToggle from './ThemeToggle';

export default function App() {
  const [user, setUser] = useState(null);
  const [profile, setProfile] = useState(null);
  const [links, setLinks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isEditMode, setIsEditMode] = useState(false);
  const [showProfileEditor, setShowProfileEditor] = useState(false);
  const [showLinkManager, setShowLinkManager] = useState(false);
  const [showAvatarUploader, setShowAvatarUploader] = useState(false);
  const [currentStatus, setCurrentStatus] = useState({ emoji: '💼', text: '工作中' });

  // 状态选项
  const statusOptions = [
    { emoji: '💼', text: '工作中' },
    { emoji: '📚', text: '学习中' },
    { emoji: '😴', text: '睡觉中' },
    { emoji: '🎮', text: '游戏中' },
    { emoji: '🏃', text: '运动中' },
    { emoji: '🍕', text: '用餐中' },
    { emoji: '🚗', text: '通勤中' },
    { emoji: '🎵', text: '听音乐' },
    { emoji: '📺', text: '看剧中' },
    { emoji: '☕', text: '休息中' },
    { emoji: '🔥', text: '忙碌中' },
    { emoji: '😊', text: '开心中' },
    { emoji: '💕', text: '恋爱中' },
    { emoji: '🆓', text: '单身中' },
    { emoji: '🎯', text: '专注中' },
    { emoji: '🌟', text: '有空聊' },
  ];

  // 检查用户认证状态
  useEffect(() => {
    const checkAuth = async () => {
      console.log('=== 开始检查认证状态 ===');
      
      try {
        console.log('步骤1: 调用 auth.getCurrentUser()');
        const { data: { user } } = await auth.getCurrentUser();
        console.log('步骤2: 获取到用户数据:', user);
        
        if (user) {
          console.log('步骤3: 用户已登录，设置用户状态');
          setUser(user);
          
          console.log('步骤4: 开始加载用户数据');
          await loadUserData(user.id);
          console.log('步骤5: 用户数据加载完成');
        } else {
          console.log('步骤3: 用户未登录');
        }
      } catch (error) {
        console.error('认证检查出错:', error);
      } finally {
        console.log('步骤6: 设置 loading 为 false');
        setLoading(false);
      }
    };

    checkAuth();
  }, []);

  // 加载用户数据（包括资料和链接）
  const loadUserData = async (userId) => {
    console.log('开始加载用户数据，用户ID:', userId);
    
    try {
      // 加载用户资料
      console.log('正在加载用户资料...');
      const { data: profileData, error: profileError } = await database.getProfile(userId);
      console.log('用户资料查询结果:', { profileData, profileError });
      
      if (profileError && profileError.code === 'PGRST116') {
        console.log('用户资料不存在，创建默认资料');
        // 用户资料不存在，创建新的
        const newProfile = {
          id: userId,
          username: user?.user_metadata?.username || user?.email?.split('@')[0] || 'user_' + userId.slice(0, 8),
          display_name: user?.user_metadata?.display_name || user?.email?.split('@')[0] || '新用户',
          bio: '这个人很懒，什么都没写...',
          avatar_url: '',
          current_status_emoji: '💼',
          current_status_text: '工作中'
        };
        
        const { data: createdProfile, error: createError } = await database.createProfile(newProfile);
        if (createError) {
          console.error('创建用户资料失败:', createError);
          setProfile(newProfile); // 使用本地数据
        } else {
          console.log('用户资料创建成功:', createdProfile);
          setProfile(createdProfile[0]);
        }
        
        setCurrentStatus({
          emoji: newProfile.current_status_emoji,
          text: newProfile.current_status_text
        });
      } else if (profileData) {
        console.log('用户资料加载成功');
        setProfile(profileData);
        setCurrentStatus({
          emoji: profileData.current_status_emoji || '💼',
          text: profileData.current_status_text || '工作中'
        });
      }

      // 加载用户链接
      console.log('正在加载用户链接...');
      const { data: linksData, error: linksError } = await database.getLinks(userId);
      console.log('用户链接查询结果:', { linksData, linksError });
      
      if (linksError) {
        console.error('加载链接失败:', linksError);
        setLinks([]); // 设为空数组
      } else {
        console.log('链接加载成功，数量:', linksData?.length || 0);
        setLinks(linksData || []);
      }
    } catch (error) {
      console.error('加载用户数据失败:', error);
      // 出错时使用默认数据
      const defaultProfile = {
        id: userId,
        username: user?.user_metadata?.username || user?.email?.split('@')[0] || 'user_' + userId.slice(0, 8),
        display_name: user?.user_metadata?.display_name || user?.email?.split('@')[0] || '新用户',
        bio: '这个人很懒，什么都没写...',
        avatar_url: '',
        current_status_emoji: '💼',
        current_status_text: '工作中'
      };
      setProfile(defaultProfile);
      setCurrentStatus({
        emoji: defaultProfile.current_status_emoji,
        text: defaultProfile.current_status_text
      });
      setLinks([]);
    }
  };

  // 处理登录成功
  const handleAuthSuccess = (user) => {
    console.log('登录成功:', user);
    setUser(user);
    loadUserData(user.id);
  };

  // 处理登出
  const handleLogout = async () => {
    try {
      await auth.signOut();
      setUser(null);
      setProfile(null);
      setLinks([]);
      setCurrentStatus({ emoji: '💼', text: '工作中' });
      setIsEditMode(false);
      setShowProfileEditor(false);
      setShowLinkManager(false);
      setShowAvatarUploader(false);
    } catch (error) {
      console.error('登出失败:', error);
    }
  };

  // 切换编辑模式
  const toggleEditMode = () => {
    const newEditMode = !isEditMode;
    setIsEditMode(newEditMode);
    console.log('切换编辑模式:', newEditMode);
    
    // 退出编辑模式时关闭所有弹窗
    if (!newEditMode) {
      setShowProfileEditor(false);
      setShowLinkManager(false);
      setShowAvatarUploader(false);
    }
  };

  // 选择状态
  const selectStatus = async (emoji, text) => {
    console.log('选择新状态:', emoji, text);
    const newStatus = { emoji, text };
    
    // 立即更新前端显示
    setCurrentStatus(newStatus);
    
    // 保存到数据库
    if (user && profile) {
      try {
        console.log('保存状态到数据库...');
        const { data, error } = await database.updateProfile(user.id, {
          current_status_emoji: emoji,
          current_status_text: text
        });
        
        if (error) {
          console.error('保存状态失败:', error);
        } else {
          console.log('状态保存成功:', data);
        }
      } catch (error) {
        console.error('更新状态失败:', error);
      }
    }
  };

  // 处理资料更新
  const handleProfileUpdate = (updatedProfile) => {
    console.log('资料更新成功:', updatedProfile);
    setProfile(updatedProfile);
    setCurrentStatus({
      emoji: updatedProfile.current_status_emoji || '💼',
      text: updatedProfile.current_status_text || '工作中'
    });
  };

  // 处理链接更新
  const handleLinksUpdate = (updatedLinks) => {
    console.log('链接更新:', updatedLinks);
    setLinks(updatedLinks);
  };

  // 处理头像更新
  const handleAvatarUpdate = (newAvatarUrl) => {
    console.log('头像更新:', newAvatarUrl);
    setProfile(prev => ({ ...prev, avatar_url: newAvatarUrl }));
  };

  console.log('当前状态 - loading:', loading, 'user:', user, 'profile:', profile, 'links:', links);

  // 加载中状态
  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-text">加载中...</div>
      </div>
    );
  }

  // 未登录显示认证界面
  if (!user) {
    return <Auth onAuthSuccess={handleAuthSuccess} />;
  }

  // 已登录显示个人页面
  return (
    <div className="main-container">
      {/* MyPage 品牌标识 */}
      <div className="brand-header">
        <div className="brand-logo">
          <span className="brand-icon">🔗</span>
          <span className="brand-name">MyPage</span>
        </div>
      </div>

      {/* 编辑按钮 */}
      <button className="toggle-edit" onClick={toggleEditMode}>
        ⚙️
      </button>

      {/* 登出按钮 */}
      <button className="logout-button" onClick={handleLogout}>
        🚪
      </button>
      
      {/* 主题切换按钮 */}
      <ThemeToggle />

      <div className="content-card">
        {/* 编辑模式提示 */}
        {isEditMode && (
          <div className="edit-mode">
            <div className="edit-mode-text">
              编辑模式已开启 - 点击状态选项来更改你的当前状态
            </div>
            <div className="edit-buttons">
              <button 
                className="edit-profile-button"
                onClick={() => setShowProfileEditor(true)}
              >
                📝 编辑个人资料
              </button>
              <button 
                className="edit-links-button"
                onClick={() => setShowLinkManager(true)}
              >
                🔗 管理链接
              </button>
            </div>
          </div>
        )}

        {/* 头像部分 - 支持点击上传 */}
        <div className="avatar-container">
          <div 
            className="avatar-clickable"
            onClick={() => isEditMode && setShowAvatarUploader(true)}
            style={{ cursor: isEditMode ? 'pointer' : 'default' }}
          >
            {profile?.avatar_url ? (
              <img
                src={profile.avatar_url}
                alt="头像"
                className="avatar-image"
              />
            ) : (
              <div className="avatar-fallback">👤</div>
            )}
            {/* 编辑模式下显示上传提示 */}
            {isEditMode && (
              <div className="avatar-upload-hint">
                📸 点击更换头像
              </div>
            )}
          </div>
          {/* 状态指示器 */}
          <div className="status-indicator">{currentStatus.emoji}</div>
        </div>

        <h1 className="user-name">{profile?.display_name || '新用户'}</h1>
        <p className="user-bio">{profile?.bio || '这个人很懒，什么都没写...'}</p>

        {/* 状态显示 */}
        <div className="status-display">
          <span className="status-emoji">{currentStatus.emoji}</span>
          <span className="status-text">{currentStatus.text}</span>
        </div>

        {/* 状态选择器 */}
        {isEditMode && (
          <div className="status-selector">
            <h3>选择你的状态</h3>
            <div className="status-options">
              {statusOptions.map((status, index) => (
                <div
                  key={index}
                  className={`status-option ${
                    currentStatus.emoji === status.emoji ? 'active' : ''
                  }`}
                  onClick={() => selectStatus(status.emoji, status.text)}
                >
                  <span>{status.emoji}</span>
                  <span>{status.text}</span>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* 链接部分 */}
        <div className="links-container">
          {links && links.length > 0 ? (
            links.map((link) => (
              <a
                key={link.id}
                href={link.url}
                target="_blank"
                rel="noopener noreferrer"
                className="link-button"
                style={{
                  display: 'block',
                  padding: '16px 24px',
                  margin: '12px auto',
                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                  color: 'white',
                  textDecoration: 'none',
                  borderRadius: '12px',
                  fontSize: '16px',
                  fontWeight: '600',
                  textAlign: 'center',
                  width: '80%',
                  maxWidth: '300px',
                  transition: 'all 0.3s ease',
                  border: 'none'
                }}
              >
                {link.title}
              </a>
            ))
          ) : (
            <div className="no-links">
              <p>还没有添加链接</p>
              {isEditMode ? (
                <p>点击"🔗 管理链接"开始添加</p>
              ) : (
                <p>点击设置按钮开始编辑</p>
              )}
            </div>
          )}
        </div>
      </div>

      {/* 个人资料编辑器弹窗 */}
      {showProfileEditor && (
        <ProfileEditor
          user={user}
          profile={profile}
          onProfileUpdate={handleProfileUpdate}
          onClose={() => setShowProfileEditor(false)}
        />
      )}

      {/* 链接管理器弹窗 */}
      {showLinkManager && (
        <LinkManager
          user={user}
          links={links}
          onLinksUpdate={handleLinksUpdate}
          onClose={() => setShowLinkManager(false)}
        />
      )}

      {/* 头像上传弹窗 */}
      {showAvatarUploader && (
        <AvatarUploader
          user={user}
          currentAvatarUrl={profile?.avatar_url}
          onAvatarUpdate={handleAvatarUpdate}
          onClose={() => setShowAvatarUploader(false)}
        />
      )}
    </div>
  );
}