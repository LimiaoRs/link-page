import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://rxucnwgurhmorqdziezb.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ4dWNud2d1cmhtb3JxZHppZXpiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE4NjkwNjksImV4cCI6MjA2NzQ0NTA2OX0.nh_rj5HcskDHRwAGIECsEwznhzBjS7GrpN_Y-xGWcB0'

export const supabase = createClient(supabaseUrl, supabaseKey)
export const auth = supabase.auth
export const database = supabase
export const db = supabase

// 生成随机4位数字后缀
const generateDiscriminator = () => {
  return Math.floor(Math.random() * 10000).toString().padStart(4, '0')
}

// 用户认证 - 支持 discriminator
export const signUp = async (email, password, username) => {
  const { data, error } = await supabase.auth.signUp({
    email,
    password,
    options: { data: { username } }
  })
  
  if (data.user && !error) {
    // 尝试创建用户资料，如果用户名重复则生成新的 discriminator
    let discriminator = generateDiscriminator()
    let attempts = 0
    const maxAttempts = 10
    
    while (attempts < maxAttempts) {
      const { error: insertError } = await supabase.from('profiles').insert({
        id: data.user.id,
        username,
        discriminator,
        email
      })
      
      if (!insertError) {
        break // 成功创建
      }
      
      if (insertError.code === '23505') { // 唯一约束违反
        discriminator = generateDiscriminator()
        attempts++
      } else {
        return { data, error: insertError }
      }
    }
    
    if (attempts >= maxAttempts) {
      return { data, error: { message: '用户名太热门了，请尝试其他用户名' } }
    }
  }
  
  return { data, error }
}

export const signIn = async (email, password) => {
  return await supabase.auth.signInWithPassword({ email, password })
}

export const signOut = async () => {
  return await supabase.auth.signOut()
}

// 用户资料
export const getUserProfile = async (userId) => {
  return await supabase
    .from('profiles')
    .select('*')
    .eq('id', userId)
    .single()
}

// 搜索用户 - 支持 discriminator
export const searchUsers = async (query) => {
  if (!query || query.trim() === '' || query.trim().length < 2) {
    return { data: [], error: null }
  }
  
  const cleanQuery = query.trim()
  
  // 检查是否是 username#discriminator 格式
  if (cleanQuery.includes('#')) {
    const [username, discriminator] = cleanQuery.split('#')
    if (username && discriminator && discriminator.length === 4) {
      const { data, error } = await supabase
        .from('profiles')
        .select('id, username, discriminator, email, avatar_url, bio')
        .eq('username', username)
        .eq('discriminator', discriminator)
        .limit(1)
      
      return { data: data || [], error }
    }
  }
  
  // 否则按用户名和邮箱搜索
  const { data, error } = await supabase
    .from('profiles')
    .select('id, username, discriminator, email, avatar_url, bio')
    .or(`username.ilike.%${cleanQuery}%,email.ilike.%${cleanQuery}%`)
    .limit(10)
  
  return { data: data || [], error }
}

// 发送好友请求（防重复版）
export const sendFriendRequest = async (senderId, receiverId) => {
  // 先检查是否已经发送过请求
  const { data: existingRequest } = await supabase
    .from('friend_requests')
    .select('*')
    .or(`and(sender_id.eq.${senderId},receiver_id.eq.${receiverId}),and(sender_id.eq.${receiverId},receiver_id.eq.${senderId})`)
    .single()
  
  if (existingRequest) {
    return { error: { message: '好友请求已存在，请耐心等待对方回应～' } }
  }
  
  // 检查是否已经是好友
  const { data: existingFriendship } = await supabase
    .from('friendships')
    .select('*')
    .or(`and(user1_id.eq.${senderId},user2_id.eq.${receiverId}),and(user1_id.eq.${receiverId},user2_id.eq.${senderId})`)
    .single()
  
  if (existingFriendship) {
    return { error: { message: '你们已经是好友了！' } }
  }
  
  // 发送新的好友请求
  return await supabase
    .from('friend_requests')
    .insert({
      sender_id: senderId,
      receiver_id: receiverId,
      status: 'pending'
    })
}

// 获取好友请求（完整版）
export const getReceivedFriendRequests = async (userId) => {
  // 先获取好友请求
  const { data: requests, error } = await supabase
    .from('friend_requests')
    .select('*')
    .eq('receiver_id', userId)
    .eq('status', 'pending')
    .order('created_at', { ascending: false })
  
  if (error || !requests || requests.length === 0) {
    return { data: [], error }
  }
  
  // 再获取发送者信息
  const senderIds = requests.map(req => req.sender_id)
  const { data: senders, error: sendersError } = await supabase
    .from('profiles')
    .select('id, username, discriminator, email, avatar_url, bio')
    .in('id', senderIds)
  
  if (sendersError) {
    return { data: [], error: sendersError }
  }
  
  // 组合数据
  const result = requests.map(request => ({
    ...request,
    sender: senders.find(sender => sender.id === request.sender_id)
  }))
  
  return { data: result, error: null }
}

export const getSentFriendRequests = async (userId) => {
  // 先获取好友请求
  const { data: requests, error } = await supabase
    .from('friend_requests')
    .select('*')
    .eq('sender_id', userId)
    .eq('status', 'pending')
    .order('created_at', { ascending: false })
  
  if (error || !requests || requests.length === 0) {
    return { data: [], error }
  }
  
  // 再获取接收者信息
  const receiverIds = requests.map(req => req.receiver_id)
  const { data: receivers, error: receiversError } = await supabase
    .from('profiles')
    .select('id, username, email, avatar_url, bio')
    .in('id', receiverIds)
  
  if (receiversError) {
    return { data: [], error: receiversError }
  }
  
  // 组合数据
  const result = requests.map(request => ({
    ...request,
    receiver: receivers.find(receiver => receiver.id === request.receiver_id)
  }))
  
  return { data: result, error: null }
}

// 处理好友请求
export const handleFriendRequest = async (requestId, action) => {
  if (action === 'accept') {
    return await supabase
      .from('friend_requests')
      .update({ status: 'accepted' })
      .eq('id', requestId)
  } else {
    return await supabase
      .from('friend_requests')
      .delete()
      .eq('id', requestId)
  }
}

// 获取好友列表（简化版）
export const getFriends = async (userId) => {
  return { data: [], error: null } // 暂时返回空数组
}

// 检查好友状态（简化版）
export const getFriendshipStatus = async (userId, otherUserId) => {
  return { status: 'none', data: null }
}

// 其他必需函数
export const removeFriend = async (userId, friendId) => {
  return { data: null, error: null }
}

// 链接相关
export const saveLinks = async (userId, links) => {
  return await supabase
    .from('links')
    .upsert({ user_id: userId, links })
}

export const getLinks = async (userId) => {
  return await supabase
    .from('links')
    .select('*')
    .eq('user_id', userId)
    .single()
}